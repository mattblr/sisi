{"version":3,"sources":["components/Footer.tsx","pages/Home.tsx","resolvers.tsx","features/charts/chartsSlice.ts","components/Chart.jsx","components/AverageButtons.tsx","components/Legend.tsx","components/MetricButtons.tsx","features/kpi/kpiSlice.ts","components/Spinner.tsx","components/KPI.tsx","components/KPIButton.tsx","containers/ChartPanel.tsx","pages/Charts.tsx","features/auth/authSlice.ts","containers/LoginForm.tsx","components/InputForm.tsx","components/Pagination.tsx","containers/AdminPanel.tsx","pages/Admin.tsx","redux/store.ts","App.tsx","index.tsx"],"names":["Footer","className","href","Home","to","GET_RAWDATA","gql","GET_NUMOFRESULTS","GET_NEWREPORTSDATA","GET_NEWREPORTSPERCENTAGECHANGEDATA","GET_KPIDATA","DELETE_RAWDATA","UPDATE_RAWDATA","ADD_RAWDATA","LOGIN","charts","createSlice","name","initialState","newReports","newReportsPC","windowedAverageValue","metric","feature","type","color","averageValue","averageLineOn","reducers","incrementWindowedAverageValue","state","decrementWindowedAverageValue","setMetric","action","payload","setNewReports","setAverageValue","setAverageLineOn","setNewReportsPC","setFeature","actions","Chart","props","useSelector","chartsSlice","chartData","useState","tooltipData","setTooltipData","tooltipTop","setTooltipTop","tooltipLeft","setTooltipLeft","visibleTooltip","setVisibleTooltip","dispatch","useDispatch","tooltipText","handleNaN","num","isNaN","width","height","data","formatDate","timeFormat","map","res","date","Number","timeParse","value","tested","WAValue","windowValue","cases","deaths","filter","d","ySelector","xSelector","Date","zSelector","bisectDate","bisector","left","xMax","yMax","xScale","scaleTime","range","domain","extent","xScaleBand","scaleBand","padding","dataMax","max","yScale","scaleLinear","nice","zScale","handleTooltip","event","x","localPoint","x0","invert","index","d0","d1","y","fill","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","GridRows","lineStyle","pointerEvents","scale","strokeDasharray","stroke","GridColumns","i","key","barWidth","bandwidth","barHeight","barX","barY","Bar","AreaClosed","strokeWidth","curve","curveMonotoneX","rx","onTouchStart","onTouchMove","onMouseMove","onMouseLeave","Line","from","style","cx","cy","r","fillOpacity","strokeOpacity","TooltipWithBounds","top","backgroundColor","Tooltip","window","scrollX","document","querySelector","getBoundingClientRect","transform","AverageButtons","selectedAverageValue","onClick","Legend","MetricButtons","kpi","kpiData","todayTested","todayCases","todayDeaths","deltaTested","deltaCases","deltaDeaths","totalTested","totalCases","totalDeaths","setKPIData","Spinner","KPI","loading","useQuery","onCompleted","kpiSlice","mobileKPICheck","mobile","showKPI","setShowKPI","KPIButton","content","Charts","innerWidth","chartWidth","setChartWidth","innerHeight","chartHeight","setChartHeight","addEventListener","variables","rollingAverageWindow","newReportsData","loadingPC","newReportsPercentageChangeData","ChartPanel","auth","userId","token","tokenExpiration","login","logout","LoginForm","email","setEmail","password","setPassword","useLazyQuery","loginReq","placeholder","onChange","e","target","InputForm","useMutation","refetchQueries","deleteRawData","deleteError","error","deleteLoading","updateRawData","updateError","updateLoading","addRawData","addError","addLoading","message","selectedReport","setSelectedReport","setShowNewButtonWindow","reportId","submitHandler","Pagination","maxPages","setMaxPages","pagesArr","Math","ceil","noOfResults","pageSize","length","push","page","pageNumber","setPageNumber","AdminPanel","showNewButtonWindow","rawData","_id","Admin","authSlice","store","configureStore","reducer","cache","InMemoryCache","client","ApolloClient","uri","resolvers","request","operation","getState","setContext","headers","authorization","App","exact","path","component","writeData","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2b845b2e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"App-footer\">\n      <a href=\"https://plusve.io\" className=\"App-link\">\n        <h6>plusve.io</h6>\n      </a>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport Footer from \"../components/Footer\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Home = () => {\n  return (\n    <>\n      <header className=\"App-home\">\n        <NavLink to=\"/charts\">\n          <h1>definitely.</h1>\n          <div className=\"subtitle\">Click here to look at the stats</div>\n        </NavLink>\n      </header>\n      <Footer />\n    </>\n  );\n};\n\nexport default Home;\n","import { gql } from \"apollo-boost\";\n\nexport const GET_RAWDATA = gql`\n  query rawData($pageSize: Int, $pageNumber: Int) {\n    rawData(pageSize: $pageSize, pageNumber: $pageNumber) {\n      _id\n      date\n      tested\n      cases\n      deaths\n    }\n  }\n`;\n\nexport const GET_NUMOFRESULTS = gql`\n  query {\n    noOfResults\n  }\n`;\n\nexport const GET_NEWREPORTSDATA = gql`\n  query newReportsData($rollingAverageWindow: Int!) {\n    newReportsData(rollingAverageWindow: $rollingAverageWindow) {\n      date\n      tested {\n        value\n        windowValue\n      }\n      cases {\n        value\n        windowValue\n      }\n      deaths {\n        value\n        windowValue\n      }\n    }\n  }\n`;\n\nexport const GET_NEWREPORTSPERCENTAGECHANGEDATA = gql`\n  query newReportsPercentageChangeData($rollingAverageWindow: Int!) {\n    newReportsPercentageChangeData(\n      rollingAverageWindow: $rollingAverageWindow\n    ) {\n      date\n      tested {\n        value\n        windowValue\n      }\n      cases {\n        value\n        windowValue\n      }\n      deaths {\n        value\n        windowValue\n      }\n    }\n  }\n`;\n\nexport const GET_KPIDATA = gql`\n  query {\n    kpiData {\n      todayTested\n      todayCases\n      todayDeaths\n      deltaTested\n      deltaCases\n      deltaDeaths\n      totalCases\n      totalTested\n      totalDeaths\n    }\n  }\n`;\n\nexport const DELETE_RAWDATA = gql`\n  mutation deleteData($reportId: ID!) {\n    deleteData(reportId: $reportId)\n  }\n`;\n\nexport const UPDATE_RAWDATA = gql`\n  mutation updateData(\n    $reportId: ID!\n    $date: String!\n    $tested: Int!\n    $cases: Int!\n    $deaths: Int!\n  ) {\n    updateData(\n      reportId: $reportId\n      date: $date\n      tested: $tested\n      cases: $cases\n      deaths: $deaths\n    ) {\n      _id\n      date\n      tested\n      cases\n      deaths\n    }\n  }\n`;\n\nexport const ADD_RAWDATA = gql`\n  mutation addNewData(\n    $date: String!\n    $tested: Int!\n    $cases: Int!\n    $deaths: Int!\n  ) {\n    addNewData(date: $date, tested: $tested, cases: $cases, deaths: $deaths) {\n      _id\n      date\n      tested\n      cases\n      deaths\n    }\n  }\n`;\n\nexport const LOGIN = gql`\n  query login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      userId\n      token\n      tokenExpiration\n    }\n  }\n`;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst charts = createSlice({\n  name: \"charts\",\n  initialState: {\n    newReports: [],\n    newReportsPC: [],\n    windowedAverageValue: 6,\n    metric: \"newReports\",\n    feature: { type: \"cases\", color: \"#c49600\" },\n    averageValue: null,\n    averageLineOn: true,\n  },\n  reducers: {\n    incrementWindowedAverageValue: (state) => {\n      if (state.windowedAverageValue < 12) {\n        state.windowedAverageValue++;\n      }\n    },\n    decrementWindowedAverageValue: (state) => {\n      if (state.windowedAverageValue > 2) {\n        state.windowedAverageValue--;\n      }\n    },\n    setMetric: (state, action) => {\n      state.metric = action.payload;\n    },\n    setNewReports: (state, action) => {\n      state.newReports = action.payload;\n    },\n    setAverageValue: (state, action) => {\n      state.averageValue = action.payload;\n    },\n\n    setAverageLineOn: (state) => {\n      state.averageLineOn = !state.averageLineOn;\n    },\n\n    setNewReportsPC: (state, action) => {\n      state.newReportsPC = action.payload;\n    },\n    setFeature: (state, action) => {\n      state.feature.type = action.payload;\n      switch (action.payload) {\n        case \"cases\":\n          state.feature.color = \"#c49600\";\n          break;\n        case \"deaths\":\n          state.feature.color = \"#c43a31\";\n          break;\n        case \"tested\":\n          state.feature.color = \"#409f24\";\n          break;\n      }\n    },\n  },\n});\n\nexport const {\n  incrementWindowedAverageValue,\n  decrementWindowedAverageValue,\n  setMetric,\n  setNewReports,\n  setNewReportsPC,\n  setFeature,\n  setAverageValue,\n  setAverageLineOn,\n} = charts.actions;\n\nexport default charts.reducer;\n","import React, { useState } from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { scaleTime, scaleLinear, scaleBand } from \"@vx/scale\";\nimport { AreaClosed, Bar, Line } from \"@vx/shape\";\n\nimport { Tooltip, TooltipWithBounds } from \"@vx/tooltip\";\nimport { curveMonotoneX } from \"@vx/curve\";\nimport { GridRows, GridColumns } from \"@vx/grid\";\nimport { extent, max, bisector } from \"d3-array\";\nimport { localPoint } from \"@vx/event\";\nimport { timeFormat } from \"d3-time-format\";\nimport { timeParse } from \"d3\";\nimport { setAverageValue } from \"../features/charts/chartsSlice\";\n\nconst Chart = (props) => {\n  const metric = useSelector((state) => state.chartsSlice.metric);\n  const feature = useSelector((state) => state.chartsSlice.feature);\n\n  const newReports = useSelector((state) => state.chartsSlice.newReports);\n\n  const averageLineOn = useSelector((state) => state.chartsSlice.averageLineOn);\n\n  const newReportsPC = useSelector((state) => state.chartsSlice.newReportsPC);\n  let chartData = metric === \"newReports\" ? newReports : newReportsPC;\n\n  const [tooltipData, setTooltipData] = useState(\"\");\n  const [tooltipTop, setTooltipTop] = useState(\"\");\n  const [tooltipLeft, setTooltipLeft] = useState(\"\");\n  const [visibleTooltip, setVisibleTooltip] = useState(false);\n\n  const dispatch = useDispatch();\n\n  let tooltipText = \"\";\n\n  const handleNaN = (num) => {\n    return isNaN(num) ? 0 : num;\n  };\n\n  if (\n    metric === \"newReportsPercentageChange\" ||\n    metric === \"windowedAveragePercentageChange\"\n  ) {\n    tooltipText = \"% difference\";\n  } else if (\n    metric === \"newReports\" ||\n    metric === \"windowedAverageNewReports\"\n  ) {\n    tooltipText = \" new reports\";\n  } else if (metric === \"rawData\") {\n    tooltipText = \" total\";\n  }\n\n  const { width, height } = props;\n  if (width < 10) return null;\n\n  const formatDate = timeFormat(\"%b %d, '%y\");\n  let data;\n\n  if (feature.type === \"tested\") {\n    data = chartData.map((res) => {\n      return {\n        date: Number(timeParse(\"%Y-%m-%d\")(res.date)),\n        value: handleNaN(Number(res.tested.value)),\n        WAValue: handleNaN(Number(res.tested.windowValue)),\n      };\n    });\n  }\n\n  if (feature.type === \"cases\") {\n    data = chartData.map((res) => {\n      return {\n        date: Number(timeParse(\"%Y-%m-%d\")(res.date)),\n        value: handleNaN(Number(res.cases.value)),\n        WAValue: handleNaN(Number(res.cases.windowValue)),\n      };\n    });\n  }\n\n  if (feature.type === \"deaths\") {\n    data = chartData.map((res) => {\n      return {\n        date: Number(timeParse(\"%Y-%m-%d\")(res.date)),\n        value: handleNaN(Number(res.deaths.value)),\n        WAValue: handleNaN(Number(res.deaths.windowValue)),\n      };\n    });\n  }\n\n  data.filter((d) => {\n    return d.value || d.WAValue > 0;\n  });\n\n  const ySelector = (data) => {\n    return Number(data.value);\n  };\n  const xSelector = (data) => {\n    return new Date(data.date);\n  };\n  const zSelector = (data) => {\n    return Number(data.WAValue);\n  };\n\n  const bisectDate = bisector((d) => new Date(d.date)).left;\n\n  const xMax = width;\n  const yMax = height;\n\n  const xScale = scaleTime({\n    range: [0, xMax],\n    domain: extent(data, xSelector),\n  });\n\n  const xScaleBand = scaleBand({\n    range: [0, xMax],\n    domain: data.map(xSelector),\n    padding: 0.2,\n  });\n\n  const dataMax = max(data, ySelector);\n\n  const yScale = scaleLinear({\n    range: [yMax, 0],\n    domain: [0, dataMax + dataMax / 3],\n    // domain: [0, Math.max(...data.map(ySelector))],\n    nice: true,\n  });\n\n  const zScale = scaleLinear({\n    range: [yMax, 0],\n    domain: [0, dataMax + dataMax / 3],\n    // domain: [0, Math.max(...data.map(ySelector))],\n    nice: true,\n  });\n\n  const handleTooltip = ({ event, data, xSelector, xScale, yScale }) => {\n    setVisibleTooltip(true);\n    const { x } = localPoint(event);\n    const x0 = xScale.invert(x);\n    const index = bisectDate(data, x0, 1);\n    const d0 = data[index];\n    const d1 = data[index - 1];\n    let d = d0;\n    if (d1 && d1.date) {\n      d = x0 - xSelector(d0.date) < xSelector(d1.date) - x0 ? d1 : d0;\n    }\n\n    setTooltipData(d);\n    setTooltipLeft(x);\n    setTooltipTop(yScale(d.value));\n\n    dispatch(setAverageValue(zSelector(tooltipData)));\n  };\n\n  return (\n    <div>\n      <svg width={width} height={height} className=\"chart-svg-area\">\n        <rect\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          fill=\"rgba(255,255,255,0.3)\"\n          //   rx={14}\n        />\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={feature.color} stopOpacity={0.8} />\n            <stop offset=\"100%\" stopColor={feature.color} stopOpacity={0.4} />\n          </linearGradient>\n        </defs>\n        <GridRows\n          lineStyle={{ pointerEvents: \"none\" }}\n          scale={yScale}\n          width={xMax}\n          strokeDasharray=\"2,2\"\n          stroke=\"#282c3433\"\n        />\n        <GridColumns\n          lineStyle={{ pointerEvents: \"none\" }}\n          scale={xScale}\n          height={yMax}\n          strokeDasharray=\"2,2\"\n          stroke=\"#282c3433\"\n        />\n        {data.map((d, i) => {\n          const key = xSelector(d);\n          const barWidth = xScaleBand.bandwidth();\n          const barHeight = yMax - yScale(ySelector(d));\n          const barX = xScale(xSelector(d));\n          const barY = yMax - barHeight;\n          return (\n            <Bar\n              key={key}\n              x={barX}\n              y={barY}\n              width={barWidth}\n              height={barHeight}\n              stroke={\"url(#gradient)\"}\n              fill={\"url(#gradient)\"}\n            />\n          );\n        })}\n        {averageLineOn === true ? (\n          <AreaClosed\n            data={data}\n            x={(d) => xScale(xSelector(d))}\n            y={(d) => zScale(zSelector(d))}\n            yScale={yScale}\n            strokeWidth={3}\n            stroke={feature.color}\n            fill=\"#00000030\"\n            curve={curveMonotoneX}\n          />\n        ) : (\n          <></>\n        )}\n        <Bar\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          fill=\"transparent\"\n          rx={14}\n          data={data}\n          onTouchStart={(event) =>\n            handleTooltip({\n              event,\n              xSelector,\n              xScale,\n              yScale,\n              data: data,\n            })\n          }\n          onTouchMove={(event) =>\n            handleTooltip({\n              event,\n              xSelector,\n              xScale,\n              yScale,\n              data: data,\n            })\n          }\n          onMouseMove={(event) =>\n            handleTooltip({\n              event,\n              xSelector,\n              xScale,\n              yScale,\n              data: data,\n            })\n          }\n          onMouseLeave={(event) => {\n            setVisibleTooltip(false);\n            dispatch(setAverageValue(null));\n          }}\n        />\n        {visibleTooltip === true && (\n          <g>\n            <Line\n              from={{ x: tooltipLeft, y: 0 }}\n              to={{ x: tooltipLeft, y: yMax }}\n              stroke={feature.color}\n              strokeWidth={2}\n              style={{ pointerEvents: \"none\" }}\n              strokeDasharray=\"2,2\"\n            />\n            <circle\n              cx={tooltipLeft}\n              cy={tooltipTop + 1}\n              r={4}\n              fill=\"black\"\n              fillOpacity={0.1}\n              stroke=\"black\"\n              strokeOpacity={0.1}\n              strokeWidth={2}\n              style={{ pointerEvents: \"none\" }}\n            />\n            <circle\n              cx={tooltipLeft}\n              cy={tooltipTop}\n              r={4}\n              fill={feature.color}\n              stroke=\"white\"\n              strokeWidth={2}\n              style={{ pointerEvents: \"none\" }}\n            />\n          </g>\n        )}\n      </svg>\n      {visibleTooltip === true && (\n        <div>\n          <TooltipWithBounds\n            top={tooltipTop - 6}\n            left={tooltipLeft + 12}\n            style={{\n              backgroundColor: feature.color,\n              color: \"white\",\n            }}\n          >\n            {`${ySelector(tooltipData)}${tooltipText}`}\n          </TooltipWithBounds>\n          <Tooltip\n            // top={yMax - 14}\n            left={\n              tooltipLeft +\n              window.scrollX +\n              document.querySelector(\".vx-bar\").getBoundingClientRect().left\n            }\n            style={{\n              transform: \"translateX(-50%)\",\n            }}\n          >\n            {formatDate(xSelector(tooltipData))}\n          </Tooltip>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../redux/store\";\nimport \"../App.css\";\nimport {\n  decrementWindowedAverageValue,\n  incrementWindowedAverageValue,\n  setAverageLineOn,\n} from \"../features/charts/chartsSlice\";\n\nconst AverageButtons = (props: any) => {\n  const dispatch = useDispatch();\n\n  const windowedAverageValue = useSelector(\n    (state: RootState) => state.chartsSlice.windowedAverageValue\n  );\n\n  const selectedAverageValue = useSelector(\n    (state: RootState) => state.chartsSlice.averageValue\n  );\n\n  const metric = useSelector((state: RootState) => state.chartsSlice.metric);\n\n  const averageLineOn = useSelector(\n    (state: RootState) => state.chartsSlice.averageLineOn\n  );\n\n  return (\n    <>\n      <div className=\"button-container-average\">\n        {averageLineOn === true ? (\n          <div className=\"pm-button-container\">\n            <div\n              className=\"pm-button\"\n              onClick={() => dispatch(incrementWindowedAverageValue())}\n            >\n              +\n            </div>\n            <div\n              className=\"pm-button\"\n              onClick={() => dispatch(decrementWindowedAverageValue())}\n            >\n              -\n            </div>\n          </div>\n        ) : (\n          <></>\n        )}\n\n        <div className=\"rolling-average-value-text\">\n          {averageLineOn === true ? (\n            <div className=\"rolling-average-value-text-item\">\n              {windowedAverageValue} day windowed average\n            </div>\n          ) : (\n            <></>\n          )}\n          {selectedAverageValue != null && averageLineOn === true ? (\n            <div className=\"rolling-average-value-text-item-value\">\n              Windowed average value: {selectedAverageValue}\n              {metric === \"newReportsPercentageChange\" ? \"%\" : \"\"}\n            </div>\n          ) : (\n            <div\n              className=\"rolling-average-value-text-item-onoff\"\n              onClick={() => {\n                dispatch(setAverageLineOn());\n              }}\n            >\n              Click here to turn the windowed average line\n              {averageLineOn === true ? \" off\" : \" on\"}\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AverageButtons;\n","import React from \"react\";\nimport { setFeature } from \"../features/charts/chartsSlice\";\nimport { RootState } from \"../redux/store\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport \"../App.css\";\n\nconst Legend = (props: any) => {\n  const dispatch = useDispatch();\n  const feature = useSelector(\n    (state: RootState) => state.chartsSlice.feature.type\n  );\n\n  return (\n    <>\n      <div className=\"legend\">\n        <div\n          className=\"legend-item\"\n          onClick={() => {\n            dispatch(setFeature(\"tested\"));\n          }}\n        >\n          <div className=\"legend-symbols-test\">&bull;</div>\n          <div\n            className={\n              feature === \"tested\" ? \"legend-text-selected\" : \"legend-text\"\n            }\n          >\n            Tested\n          </div>\n        </div>\n        <div\n          className=\"legend-item\"\n          onClick={() => {\n            dispatch(setFeature(\"cases\"));\n          }}\n        >\n          <div className=\"legend-symbols-case\">&bull;</div>\n          <div\n            className={\n              feature === \"cases\" ? \"legend-text-selected\" : \"legend-text\"\n            }\n          >\n            {\" \"}\n            Cases\n          </div>\n        </div>\n        <div\n          className=\"legend-item\"\n          onClick={() => {\n            dispatch(setFeature(\"deaths\"));\n          }}\n        >\n          <div className=\"legend-symbols-death\">&bull;</div>\n          <div\n            className={\n              feature === \"deaths\" ? \"legend-text-selected\" : \"legend-text\"\n            }\n          >\n            Deaths\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Legend;\n","import React from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { RootState } from \"../redux/store\";\nimport \"../App.css\";\nimport { setMetric } from \"../features/charts/chartsSlice\";\n\nconst MetricButtons = (props: any) => {\n  const metric = useSelector((state: RootState) => state.chartsSlice.metric);\n\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <div className=\"button-container-metric\">\n        <div\n          className={\n            metric === \"newReports\" ? \"button-metric-selected\" : \"button-metric\"\n          }\n          onClick={() => {\n            dispatch(setMetric(\"newReports\"));\n          }}\n        >\n          New Daily Reported Values\n        </div>\n        <div\n          className={\n            metric === \"newReportsPercentageChange\"\n              ? \"button-metric-selected\"\n              : \"button-metric\"\n          }\n          onClick={() => {\n            dispatch(setMetric(\"newReportsPercentageChange\"));\n          }}\n        >\n          Daily Change on Totals\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default MetricButtons;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst kpi = createSlice({\n  name: \"kpi\",\n  initialState: {\n    kpiData: {\n      todayTested: 0,\n      todayCases: 0,\n      todayDeaths: 0,\n      deltaTested: 0,\n      deltaCases: 0,\n      deltaDeaths: 0,\n      totalTested: 0,\n      totalCases: 0,\n      totalDeaths: 0,\n    },\n  },\n  reducers: {\n    setKPIData: (state, action) => {\n      state.kpiData.todayTested = action.payload.todayTested;\n      state.kpiData.todayCases = action.payload.todayCases;\n      state.kpiData.todayDeaths = action.payload.todayDeaths;\n      state.kpiData.deltaTested = action.payload.deltaTested;\n      state.kpiData.deltaCases = action.payload.deltaCases;\n      state.kpiData.deltaDeaths = action.payload.deltaDeaths;\n      state.kpiData.totalTested = action.payload.totalTested;\n      state.kpiData.totalCases = action.payload.totalCases;\n      state.kpiData.totalDeaths = action.payload.totalDeaths;\n    },\n  },\n});\n\nexport const { setKPIData } = kpi.actions;\n\nexport default kpi.reducer;\n","import React from \"react\";\nimport \"./Spinner.css\";\n\nconst Spinner = () => {\n  return (\n    <div className=\"lds-roller\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../redux/store\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport { GET_KPIDATA } from \"../resolvers\";\nimport { setKPIData } from \"../features/kpi/kpiSlice\";\nimport Spinner from \"./Spinner\";\n\nconst KPI = (props: any) => {\n  const dispatch = useDispatch();\n  const { loading } = useQuery(GET_KPIDATA, {\n    onCompleted: (d) => {\n      dispatch(setKPIData(d.kpiData));\n    },\n  });\n\n  const kpiData = useSelector((state: RootState) => state.kpiSlice.kpiData);\n\n  let mobileKPICheck = props.mobile === true ? !props.showKPI : props.showKPI;\n\n  return (\n    <div\n      className={\n        props.mobile === true ? \"kpi-container-mobile\" : \"kpi-container\"\n      }\n      onClick={() => {\n        props.setShowKPI(mobileKPICheck);\n      }}\n    >\n      {loading ? (\n        <Spinner />\n      ) : (\n        <>\n          <div className=\"kpi-title\">Latest figures</div>\n          <div className=\"kpi-new-container\">\n            <div className=\"kpi-item\">\n              {kpiData.todayTested}\n              <div\n                className={\n                  kpiData.deltaTested > 0 ? \"kpi-delta-nve\" : \"kpi-delta-ve\"\n                }\n              >\n                {kpiData.deltaTested}\n              </div>\n            </div>\n            <div className=\"kpi-item\">\n              {kpiData.todayCases}\n\n              <div\n                className={\n                  kpiData.deltaCases > 0 ? \"kpi-delta-ve\" : \"kpi-delta-nve\"\n                }\n              >\n                {kpiData.deltaCases}\n              </div>\n            </div>\n            <div className=\"kpi-item\">\n              {kpiData.todayDeaths}\n              <div\n                className={\n                  kpiData.deltaDeaths > 0 ? \"kpi-delta-ve\" : \"kpi-delta-nve\"\n                }\n              >\n                {kpiData.deltaDeaths}\n              </div>\n            </div>\n          </div>\n          <>\n            {/* <div className=\"kpi-divider-overlay\" /> */}\n            <div className=\"kpi-divider\">\n              <div className=\"kpi-divider-item\">Tested</div>\n              <div className=\"kpi-divider-item\">Cases</div>\n              <div className=\"kpi-divider-item\">Deaths</div>\n            </div>\n          </>\n          <div className=\"kpi-totals-container\">\n            <div className=\"kpi-item\">{kpiData.totalTested}</div>\n            <div className=\"kpi-item\">{kpiData.totalCases}</div>\n            <div className=\"kpi-item\">{kpiData.totalDeaths}</div>\n          </div>\n\n          <div className=\"kpi-title\">Total figures</div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default KPI;\n","import React from \"react\";\n\nconst KPIButton = (props: any) => {\n  let content;\n\n  content = props.showKPI === true ? \"Chart\" : \"KPIs\";\n\n  return (\n    <div className=\"kpi-button-container\">\n      <div\n        className=\"kpi-button\"\n        onClick={() => {\n          props.setShowKPI(!props.showKPI);\n        }}\n      >\n        {content}\n      </div>\n    </div>\n  );\n};\n\nexport default KPIButton;\n","import React, { useState } from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { RootState } from \"../redux/store\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport {\n  GET_NEWREPORTSDATA,\n  GET_NEWREPORTSPERCENTAGECHANGEDATA,\n} from \"../resolvers\";\n\nimport { setNewReports, setNewReportsPC } from \"../features/charts/chartsSlice\";\n\nimport Chart from \"../components/Chart.jsx\";\nimport AverageButtons from \"../components/AverageButtons\";\n\nimport Legend from \"../components/Legend\";\n\nimport MetricButtons from \"../components/MetricButtons\";\n\nimport \"../App.css\";\nimport KPI from \"../components/KPI\";\nimport KPIButton from \"../components/KPIButton\";\n\nimport Spinner from \"../components/Spinner\";\n\nconst Charts = () => {\n  const [showKPI, setShowKPI] = useState<boolean>(false);\n\n  const [chartWidth, setChartWidth] = useState<any>(window.innerWidth * 0.75);\n\n  const [chartHeight, setChartHeight] = useState<any>(window.innerHeight * 0.7);\n\n  window.addEventListener(\"resize\", () => {\n    setChartWidth(window.innerWidth * 0.75);\n    setChartHeight(window.innerHeight * 0.7);\n  });\n\n  const dispatch = useDispatch();\n\n  const windowedAverageValue = useSelector(\n    (state: RootState) => state.chartsSlice.windowedAverageValue\n  );\n\n  const { loading } = useQuery(GET_NEWREPORTSDATA, {\n    variables: {\n      rollingAverageWindow: windowedAverageValue,\n    },\n    onCompleted: (d) => dispatch(setNewReports(d.newReportsData)),\n  });\n  const { loading: loadingPC } = useQuery(GET_NEWREPORTSPERCENTAGECHANGEDATA, {\n    variables: {\n      rollingAverageWindow: windowedAverageValue,\n    },\n    onCompleted: (d) =>\n      dispatch(setNewReportsPC(d.newReportsPercentageChangeData)),\n  });\n\n  return (\n    <>\n      <MetricButtons />\n      <div className={\"chart-container\"}>\n        <div className=\"chart\">\n          {showKPI === false ? (\n            loading || loadingPC ? (\n              <Spinner />\n            ) : (\n              <Chart width={chartWidth} height={chartHeight} />\n            )\n          ) : (\n            <KPI showKPI={showKPI} mobile={true} setShowKPI={setShowKPI} />\n          )}\n        </div>\n        <div className=\"buttons-legend\">\n          <KPI showKPI={showKPI} setShowKPI={setShowKPI} />\n          <Legend />\n          <div className=\"mobile-button-container\">\n            <AverageButtons />\n            <KPIButton showKPI={showKPI} setShowKPI={setShowKPI} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Charts;\n","import React from \"react\";\nimport ChartPanel from \"../containers/ChartPanel\";\nimport Footer from \"../components/Footer\";\n\nconst Charts = () => {\n  return (\n    <>\n      <ChartPanel />\n      <Footer />\n    </>\n  );\n};\n\nexport default Charts;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst auth = createSlice({\n  name: \"auth\",\n  initialState: {\n    userId: \"\",\n    token: \"\",\n    tokenExpiration: 0,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.userId = action.payload.userId;\n      state.token = action.payload.token;\n      state.tokenExpiration = action.payload.tokenExpiration;\n    },\n    logout: (state) => {\n      state.userId = \"\";\n      state.token = \"\";\n      state.tokenExpiration = 0;\n    },\n  },\n});\n\nexport const { login, logout } = auth.actions;\n\nexport default auth.reducer;\n","import React, { useState } from \"react\";\nimport Spinner from \"../components/Spinner\";\nimport { useDispatch } from \"react-redux\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport { LOGIN } from \"../resolvers\";\n\nimport { login } from \"../features/auth/authSlice\";\n\nconst LoginForm = (props: any) => {\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  // const\n\n  const [loginReq, { loading }] = useLazyQuery(LOGIN, {\n    variables: { email, password },\n    onCompleted: (d) => dispatch(login(d.login)),\n  });\n\n  return (\n    <>\n      <div className=\"login-form-container\">\n        {loading ? (\n          <Spinner />\n        ) : (\n          <form className=\"login-form\">\n            <div className=\"login-title-container\">\n              <div className=\"login-title\">shouldiselfisolate.com</div>\n            </div>\n            <input\n              className=\"email-input\"\n              type=\"text\"\n              name=\"email\"\n              value={email}\n              placeholder=\"Enter your email address\"\n              onChange={(e) => {\n                setEmail(e.target.value);\n              }}\n            />\n            <input\n              className=\"password-input\"\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              placeholder=\"Enter your password\"\n              onChange={(e) => {\n                setPassword(e.target.value);\n              }}\n            />\n            <div\n              className=\"login-button-input\"\n              onClick={() => {\n                loginReq();\n              }}\n            >\n              Login\n            </div>\n          </form>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React from \"react\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\n\nimport { ADD_RAWDATA, DELETE_RAWDATA, UPDATE_RAWDATA } from \"../resolvers\";\nimport Spinner from \"./Spinner\";\n\nconst InputForm = (props: any) => {\n  const [\n    deleteRawData,\n    { error: deleteError, loading: deleteLoading },\n  ] = useMutation(DELETE_RAWDATA, {\n    refetchQueries: [\"rawData\"],\n  });\n  const [\n    updateRawData,\n    { error: updateError, loading: updateLoading },\n  ] = useMutation(UPDATE_RAWDATA, {\n    refetchQueries: [\"rawData\"],\n  });\n\n  const [addRawData, { error: addError, loading: addLoading }] = useMutation(\n    ADD_RAWDATA,\n    {\n      refetchQueries: [\"rawData\"],\n    }\n  );\n\n  if (deleteError || updateError || addError)\n    return (\n      <>\n        Error! ${deleteError.message || updateError.message || addError.message}\n      </>\n    );\n\n  if (deleteLoading || updateLoading || addLoading) return <Spinner />;\n\n  const submitHandler = () => {\n    switch (props.selectedReport.type) {\n      case \"add\":\n        addRawData({\n          variables: {\n            date: props.selectedReport.date,\n            tested: props.selectedReport.tested,\n            cases: props.selectedReport.cases,\n            deaths: props.selectedReport.deaths,\n          },\n        });\n        break;\n      case \"delete\":\n        deleteRawData({\n          variables: { reportId: props.selectedReport.reportId },\n        });\n        break;\n      case \"update\":\n        updateRawData({\n          variables: {\n            reportId: props.selectedReport.reportId,\n            date: props.selectedReport.date,\n            tested: props.selectedReport.tested,\n            cases: props.selectedReport.cases,\n            deaths: props.selectedReport.deaths,\n          },\n        });\n\n        break;\n    }\n\n    props.setSelectedReport({\n      reportId: \"\",\n      date: \"\",\n      tested: 0,\n      cases: 0,\n      deaths: 0,\n      type: \"\",\n    });\n  };\n\n  return (\n    <>\n      <div className=\"input-form-container\">\n        <div className=\"input-title-container\">\n          <div className=\"input-title\">Date</div>\n          <input\n            className=\"date-input\"\n            type=\"date\"\n            name=\"date\"\n            value={props.selectedReport.date}\n            placeholder=\"Enter date\"\n            onChange={(e) => {\n              props.setSelectedReport({\n                ...props.selectedReport,\n                date: e.target.value,\n              });\n            }}\n          />\n        </div>\n      </div>\n\n      <div className=\"input-form-container\">\n        <div className=\"input-title-container\">\n          <div className=\"input-title\">Tested</div>\n          <input\n            className=\"tested-input\"\n            type=\"number\"\n            name=\"tested\"\n            placeholder=\"Tested\"\n            value={props.selectedReport.tested}\n            onChange={(e) => {\n              props.setSelectedReport({\n                ...props.selectedReport,\n                tested: Number(e.target.value),\n              });\n            }}\n          />\n        </div>\n        <div className=\"input-title-container\">\n          <div className=\"input-title\">Cases</div>\n          <input\n            className=\"cases-input\"\n            type=\"number\"\n            name=\"cases\"\n            value={props.selectedReport.cases}\n            placeholder=\"Cases\"\n            onChange={(e) => {\n              props.setSelectedReport({\n                ...props.selectedReport,\n                cases: Number(e.target.value),\n              });\n            }}\n          />\n        </div>\n        <div className=\"input-title-container\">\n          <div className=\"input-title\">Deaths</div>\n          <input\n            className=\"deaths-input\"\n            type=\"number\"\n            name=\"deaths\"\n            placeholder=\"Deaths\"\n            value={props.selectedReport.deaths}\n            onChange={(e) => {\n              props.setSelectedReport({\n                ...props.selectedReport,\n                deaths: Number(e.target.value),\n              });\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"input-button-container\">\n        <div\n          onClick={() => {\n            props.setShowNewButtonWindow(false);\n          }}\n        >\n          Cancel\n        </div>\n        <div\n          onClick={() => {\n            props.setShowNewButtonWindow(false);\n            submitHandler();\n          }}\n        >\n          {props.selectedReport.type === \"delete\" ? (\n            <> Delete </>\n          ) : (\n            <> Submit</>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default InputForm;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport { GET_NUMOFRESULTS } from \"../resolvers\";\n\nconst Pagination = (props: any) => {\n  const [maxPages, setMaxPages] = useState(1);\n  let pagesArr = [1];\n\n  useQuery(GET_NUMOFRESULTS, {\n    onCompleted: (d) => {\n      setMaxPages(Math.ceil(d.noOfResults / props.pageSize));\n    },\n  });\n\n  for (; pagesArr.length < maxPages; ) {\n    pagesArr.push(pagesArr.length + 1);\n  }\n\n  return (\n    <div className=\"page-number-container\">\n      {pagesArr.map((page: number) => {\n        return (\n          <div\n            key={page}\n            className={\n              props.pageNumber === page\n                ? \"page-number-item-selected\"\n                : \"page-number-item\"\n            }\n            onClick={() => {\n              props.setPageNumber(page);\n            }}\n          >\n            {page}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Pagination;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_RAWDATA } from \"../resolvers\";\nimport Spinner from \"../components/Spinner\";\nimport InputForm from \"../components/InputForm\";\nimport Pagination from \"../components/Pagination\";\n\nconst AdminPanel = (props: any) => {\n  const [showNewButtonWindow, setShowNewButtonWindow] = useState(false);\n\n  const [pageNumber, setPageNumber] = useState(1);\n\n  const [selectedReport, setSelectedReport] = useState({\n    reportId: \"\",\n    date: \"\",\n    tested: 0,\n    cases: 0,\n    deaths: 0,\n    type: \"\",\n  });\n\n  const pageSize = 10;\n\n  const { data: rawData, loading } = useQuery(GET_RAWDATA, {\n    variables: { pageSize, pageNumber },\n  });\n\n  if (loading) return <Spinner />;\n\n  return (\n    <>\n      <div className=\"report-data-container\">\n        <div\n          className={\n            showNewButtonWindow === false\n              ? \"report-data-new-button\"\n              : \"report-data-new-button-expanded\"\n          }\n        >\n          {showNewButtonWindow === false ? (\n            <div\n              onClick={() => {\n                setShowNewButtonWindow(true);\n                setSelectedReport({\n                  ...selectedReport,\n                  type: \"add\",\n                });\n              }}\n            >\n              Add new data\n            </div>\n          ) : (\n            <InputForm\n              setShowNewButtonWindow={setShowNewButtonWindow}\n              setSelectedReport={setSelectedReport}\n              selectedReport={selectedReport}\n            />\n          )}\n        </div>\n        <div className=\"report-data-container-page\">\n          <div className=\"report-data-header\">\n            <div className=\"report-data-header-item-date\">Date</div>\n            <div className=\"report-data-header-item\">Tested</div>\n            <div className=\"report-data-header-item\">Cases</div>\n            <div className=\"report-data-header-item\">Deaths</div>\n            <div className=\"report-data-header-item-buttons\">Actions</div>\n          </div>\n          {rawData.rawData.map((data: any) => {\n            return (\n              <div className=\"report-data-item\" key={data._id}>\n                <div className=\"report-data-item-date\">{data.date}</div>\n                <div className=\"report-data-item-tested\">{data.tested}</div>\n                <div className=\"report-data-item-cases\">{data.cases}</div>\n                <div className=\"report-data-item-deaths\">{data.deaths}</div>\n                <div\n                  className=\"report-data-item-edit-button\"\n                  onClick={() => {\n                    setShowNewButtonWindow(true);\n                    setSelectedReport({\n                      reportId: data._id,\n                      date: data.date,\n                      tested: data.tested,\n                      cases: data.cases,\n                      deaths: data.deaths,\n                      type: \"update\",\n                    });\n                  }}\n                >\n                  Edit\n                </div>\n                <div\n                  className=\"report-data-item-delete-button\"\n                  onClick={() => {\n                    setShowNewButtonWindow(true);\n                    setSelectedReport({\n                      reportId: data._id,\n                      date: data.date,\n                      tested: data.tested,\n                      cases: data.cases,\n                      deaths: data.deaths,\n                      type: \"delete\",\n                    });\n                  }}\n                >\n                  Delete\n                </div>\n              </div>\n            );\n          })}\n          <Pagination\n            pageSize={pageSize}\n            pageNumber={pageNumber}\n            setPageNumber={setPageNumber}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AdminPanel;\n","import React from \"react\";\nimport Footer from \"../components/Footer\";\nimport LoginForm from \"../containers/LoginForm\";\nimport AdminPanel from \"../containers/AdminPanel\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/store\";\n\nconst Admin = () => {\n  const token = useSelector((state: RootState) => state.authSlice.token);\n\n  return (\n    <>\n      <div className=\"admin\">\n        {token === \"\" ? <LoginForm /> : <AdminPanel />}\n      </div>\n      <Footer />\n    </>\n  );\n};\n\nexport default Admin;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport authSlice from \"../features/auth/authSlice\";\nimport chartsSlice from \"../features/charts/chartsSlice\";\n\nimport kpiSlice from \"../features/kpi/kpiSlice\";\n\nconst store = configureStore({\n  reducer: { authSlice, chartsSlice, kpiSlice },\n});\n\nexport default store;\nexport type RootState = ReturnType<typeof store.getState>;\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\nimport Charts from \"./pages/Charts\";\nimport Admin from \"./pages/Admin\";\n\nimport store from \"./redux/store\";\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  uri: \"https://sisi-api.azurewebsites.net\",\n  cache,\n  resolvers: {},\n  request: (operation) => {\n    const token: any = store.getState().authSlice.token;\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    });\n  },\n});\n\nconst data = {};\n\ncache.writeData({ data });\n\nexport default function App() {\n  return (\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <div className=\"App\">\n          <Route exact path=\"/charts\" component={Charts} />\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/admin\" component={Admin} />\n          {/* <Route component={Home} /> */}\n        </div>\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}